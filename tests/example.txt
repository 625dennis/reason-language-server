{"processId":14679,"rootPath":"/Users/jared/clone/tools/language-server/example-project","rootUri":"file:///Users/jared/clone/tools/language-server/example-project","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"]},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"]}},"definition":{"dynamicRegistration":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"codeAction":{"dynamicRegistration":true},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true},"typeDefinition":{"dynamicRegistration":true},"implementation":{"dynamicRegistration":true},"colorProvider":{"dynamicRegistration":true}}},"trace":"off","workspaceFolders":[{"uri":"file:///Users/jared/clone/tools/language-server","name":"language-server"}]}
{"jsonrpc":"2.0","method":"initialized","params":{}}
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","reloadOnChange":false}}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Other.re","languageId":"reason","version":1,"text":"\n/* let later = 10; */\n\n/* Ok testing things */\n\nlet something = 10;\n\ntype person = {name: string, age: int};\n\ntype animals = Dogz(int) | Cat(string) | Mouse;\n\nlet m = Dogz(1);\n\nlet z = {name: \"hi\", age: 20};\n\nlet later = 20;\n\n/* let e = z.name; */\n"}}}
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","languageId":"reason","version":1,"text":"/* let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool; */\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.later;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}}}
{"jsonrpc":"2.0","id":1,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Other.re"}}}
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Other.re"},"position":{"line":9,"character":31}}}
{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Other.re"},"position":{"line":9,"character":32}}}
{"jsonrpc":"2.0","id":5,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Other.re"},"position":{"line":9,"character":32}}}
{"jsonrpc":"2.0","id":6,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":10,"character":16}}}
{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":10,"character":16}}}
{"jsonrpc":"2.0","id":8,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":10,"character":16}}}
{"jsonrpc":"2.0","id":9,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":10,"character":18}}}
{"jsonrpc":"2.0","id":10,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":9,"character":11}}}
{"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":22,"character":10}}}
{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":21,"character":7}}}
{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":4,"character":11}}}
{"jsonrpc":"2.0","id":14,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":4,"character":12}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":2},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.later;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":6,"character":15}}}
{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":4,"character":9}}}
{"jsonrpc":"2.0","id":18,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":4,"character":10}}}
{"jsonrpc":"2.0","id":19,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":4,"character":9}}}
{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":4,"character":8}}}
{"jsonrpc":"2.0","id":21,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":4,"character":9}}}
{"jsonrpc":"2.0","id":22,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":4,"character":9}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":2},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.later;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":23,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","id":24,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":19}}}
{"jsonrpc":"2.0","id":25,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":20}}}
{"jsonrpc":"2.0","id":26,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":19}}}
{"jsonrpc":"2.0","id":27,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":20}}}
{"jsonrpc":"2.0","id":28,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":24}}}
{"jsonrpc":"2.0","id":29,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":25}}}
{"jsonrpc":"2.0","id":30,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":25}}}
{"jsonrpc":"2.0","id":31,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":21}}}
{"jsonrpc":"2.0","id":32,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":20}}}
{"jsonrpc":"2.0","id":33,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":26}}}
{"jsonrpc":"2.0","id":34,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":27}}}
{"jsonrpc":"2.0","id":35,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":26}}}
{"jsonrpc":"2.0","id":36,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":27}}}
{"jsonrpc":"2.0","id":37,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":30,"character":26}}}
{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":31,"character":22}}}
{"jsonrpc":"2.0","id":39,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":21,"character":5}}}
{"jsonrpc":"2.0","id":40,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":21,"character":4}}}
{"jsonrpc":"2.0","id":41,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":22,"character":4}}}
{"jsonrpc":"2.0","id":42,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":22,"character":3}}}
{"jsonrpc":"2.0","id":43,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":22,"character":4}}}
{"jsonrpc":"2.0","id":44,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":23}}}
{"jsonrpc":"2.0","id":45,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":24}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":4},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.s;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":46,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":25},"context":{"triggerKind":1}}}
{"jsonrpc":"2.0","id":47,"method":"completionItem/resolve","params":{"label":"something","detail":"let something: int","documentation":{"kind":"markdown","value":"(no documentation)\n\n*src/Other.re*"},"insertTextFormat":1,"kind":12}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":7},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.some;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":48,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":12},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":49,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","id":50,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":27}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":12},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":12}}}
{"jsonrpc":"2.0","id":51,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":27}}}
{"jsonrpc":"2.0","id":52,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":29}}}
{"jsonrpc":"2.0","id":53,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":28}}}
{"jsonrpc":"2.0","id":54,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":28,"character":26}}}
{"jsonrpc":"2.0","id":55,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":30,"character":24}}}
{"jsonrpc":"2.0","id":56,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":31,"character":24}}}
{"jsonrpc":"2.0","id":57,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":31,"character":24}}}
{"jsonrpc":"2.0","id":58,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":31,"character":23}}}
{"jsonrpc":"2.0","id":59,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":35,"character":34}}}
{"jsonrpc":"2.0","id":60,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":35,"character":34}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":14},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\n\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":61,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":15},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\na\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":62,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":39,"character":1},"context":{"triggerKind":1}}}
{"jsonrpc":"2.0","id":63,"method":"completionItem/resolve","params":{"label":"a","detail":"let a: list(string)","documentation":{"kind":"markdown","value":"(no documentation)\n\n*(current file)*"},"insertTextFormat":1,"kind":12}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":16},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\naw\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":64,"method":"completionItem/resolve","params":{"label":"awesome","detail":"let awesome: int","documentation":{"kind":"markdown","value":" Some docs about this **awesome** thing. \n\n*(current file)*"},"insertTextFormat":1,"kind":12}}
{"jsonrpc":"2.0","id":65,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":17},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":66,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":18},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":67,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":19},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\n\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":68,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":20},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\nS\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":69,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":40,"character":1},"context":{"triggerKind":1}}}
{"jsonrpc":"2.0","id":70,"method":"completionItem/resolve","params":{"label":"Scanf","insertTextFormat":1,"kind":9,"data":{"cmt":"/Users/jared/clone/tools/language-server/example-project/node_modules/bs-platform/lib/ocaml/scanf.cmti","src":"/Users/jared/clone/tools/language-server/example-project/node_modules/bs-platform/lib/ocaml/scanf.mli","name":"Scanf"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":21},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\nSo\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":71,"method":"completionItem/resolve","params":{"label":"Something","detail":"module Something {\nlet m: Other.person\nlet animal: Other.animals\nlet other: Other.animals\nlet me: Other.animals\nlet x: int\n}","documentation":{"kind":"markdown","value":"(no documentation)\n\n*(current file)*"},"insertTextFormat":1,"kind":9}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":23},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\nSome\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":72,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":25},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\nSomething.\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":73,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":40,"character":10},"context":{"triggerKind":2,"triggerCharacter":"."}}}
{"jsonrpc":"2.0","id":74,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":26},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\nSomething.m\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":75,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":40,"character":11},"context":{"triggerKind":1}}}
{"jsonrpc":"2.0","id":76,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":27},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\nSomething.\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":77,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":36},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\nS\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":78,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":37},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\n\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":79,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":38},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\nS\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":80,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":40,"character":1},"context":{"triggerKind":1}}}
{"jsonrpc":"2.0","id":81,"method":"completionItem/resolve","params":{"label":"Scanf","detail":"module Scanf {\nmodule Scanning {\ntype in_channel\ntype scanbuf = in_channel\nlet stdin: in_channel\ntype file_name = string\nlet open_in: file_name => in_channel\nlet open_in_bin: file_name => in_channel\nlet close_in: in_channel => unit\nlet from_file: file_name => in_channel\nlet from_file_bin: string => in_channel\nlet from_string: string => in_channel\nlet from_function: unit => char => in_channel\nlet from_channel: Pervasives.in_channel => in_channel\nlet end_of_input: in_channel => bool\nlet beginning_of_input: in_channel => bool\nlet name_of_input: in_channel => string\nlet stdib: in_channel\n}\ntype scanner('a, 'b, 'c, 'd) = Pervasives.format6(\n  'a,\n  Scanning.in_channel,\n  'b,\n  'c,\n  'a => 'd,\n  'd\n) => 'c\nlet bscanf: Scanning.in_channel => scanner('a, 'b, 'c, 'd)\nlet fscanf: Pervasives.in_channel => scanner('a, 'b, 'c, 'd)\nlet sscanf: string => scanner('a, 'b, 'c, 'd)\nlet scanf: scanner('a, 'b, 'c, 'd)\nlet kscanf: (\n  Scanning.in_channel,\n  (Scanning.in_channel, exn) => 'd\n) => scanner('a, 'b, 'c, 'd)\nlet ksscanf: (\n  string,\n  (Scanning.in_channel, exn) => 'd\n) => scanner('a, 'b, 'c, 'd)\nlet kfscanf: (\n  Pervasives.in_channel,\n  (Scanning.in_channel, exn) => 'd\n) => scanner('a, 'b, 'c, 'd)\nlet bscanf_format: (\n  Scanning.in_channel,\n  Pervasives.format6('a, 'b, 'c, 'd, 'e, 'f),\n  Pervasives.format6('a, 'b, 'c, 'd, 'e, 'f) => 'g\n) => 'g\nlet sscanf_format: (\n  string,\n  Pervasives.format6('a, 'b, 'c, 'd, 'e, 'f),\n  Pervasives.format6('a, 'b, 'c, 'd, 'e, 'f) => 'g\n) => 'g\nlet format_from_string: (\n  string,\n  Pervasives.format6(\n    'a,\n    'b,\n    'c,\n    'd,\n    'e,\n    'f\n  )\n) => Pervasives.format6('a, 'b, 'c, 'd, 'e, 'f)\nlet unescaped: string => string\n}","documentation":{"kind":"markdown","value":" Formatted input functions. \n\n*node_modules/bs-platform/lib/ocaml/scanf.mli*"},"insertTextFormat":1,"kind":9,"data":{"cmt":"/Users/jared/clone/tools/language-server/example-project/node_modules/bs-platform/lib/ocaml/scanf.cmti","src":"/Users/jared/clone/tools/language-server/example-project/node_modules/bs-platform/lib/ocaml/scanf.mli","name":"Scanf"}}}
{"jsonrpc":"2.0","id":82,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":39},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\nSo\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":83,"method":"completionItem/resolve","params":{"label":"Something","detail":"module Something {\nlet m: Other.person\nlet animal: Other.animals\nlet other: Other.animals\nlet me: Other.animals\nlet x: int\n}","documentation":{"kind":"markdown","value":"(no documentation)\n\n*(current file)*"},"insertTextFormat":1,"kind":9}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":40},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\nSom\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":84,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":41},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\nSomething\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":85,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":42},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nawesome;\nSomething.\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":86,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":40,"character":10},"context":{"triggerKind":2,"triggerCharacter":"."}}}
{"jsonrpc":"2.0","id":87,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":43},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\n\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":88,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":44},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nO\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":89,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":39,"character":1},"context":{"triggerKind":1}}}
{"jsonrpc":"2.0","id":90,"method":"completionItem/resolve","params":{"label":"Obj","insertTextFormat":1,"kind":9,"data":{"cmt":"/Users/jared/clone/tools/language-server/example-project/node_modules/bs-platform/lib/ocaml/obj.cmti","src":"/Users/jared/clone/tools/language-server/example-project/node_modules/bs-platform/lib/ocaml/obj.mli","name":"Obj"}}}
{"jsonrpc":"2.0","id":91,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":45},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nOt\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":92,"method":"completionItem/resolve","params":{"label":"Other","detail":"module Other {\nlet something: int\ntype person = {name: string, age: int}\ntype animals = | Dogz(int) | Cat(string) | Mouse\n\nlet m: animals\nlet z: person\n}","documentation":{"kind":"markdown","value":"(no documentation)\n\n*src/Other.re*"},"insertTextFormat":1,"kind":9,"data":{"cmt":"/Users/jared/clone/tools/language-server/example-project/lib/bs/src/Other.cmt","src":"/Users/jared/clone/tools/language-server/example-project/src/Other.re","name":"Other"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":46},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nOth\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":93,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":48},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\nOther.\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":94,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"},"position":{"line":39,"character":6},"context":{"triggerKind":2,"triggerCharacter":"."}}}
{"jsonrpc":"2.0","id":95,"method":"completionItem/resolve","params":{"label":"animals","detail":"type animals = | Dogz(int) | Cat(string) | Mouse\n","documentation":{"kind":"markdown","value":"(no documentation)\n\n*src/Other.re*"},"insertTextFormat":1,"kind":22}}
{"jsonrpc":"2.0","id":96,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","id":97,"method":"completionItem/resolve","params":{"label":"m","detail":"let m: animals","documentation":{"kind":"markdown","value":"(no documentation)\n\n*src/Other.re*"},"insertTextFormat":1,"kind":12}}
{"jsonrpc":"2.0","id":98,"method":"completionItem/resolve","params":{"label":"person","detail":"type person = {name: string, age: int}","documentation":{"kind":"markdown","value":"(no documentation)\n\n*src/Other.re*"},"insertTextFormat":1,"kind":22}}
{"jsonrpc":"2.0","id":99,"method":"completionItem/resolve","params":{"label":"something","detail":"let something: int","documentation":{"kind":"markdown","value":"(no documentation)\n\n*src/Other.re*"},"insertTextFormat":1,"kind":12}}
{"jsonrpc":"2.0","id":100,"method":"completionItem/resolve","params":{"label":"z","detail":"let z: person","documentation":{"kind":"markdown","value":"(no documentation)\n\n*src/Other.re*"},"insertTextFormat":1,"kind":12}}
{"jsonrpc":"2.0","id":101,"method":"completionItem/resolve","params":{"label":"animals","detail":"type animals = | Dogz(int) | Cat(string) | Mouse\n","documentation":{"kind":"markdown","value":"(no documentation)\n\n*src/Other.re*"},"insertTextFormat":1,"kind":22}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":49},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":102,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re","version":50},"contentChanges":[{"text":"let someLongName = 10;\n\nlet otherLongName = \"string\";\n\nstring_of_bool;\n\nmodule Something = {\n  open Other;\n\n  let m = {name: \"Me\", age: 0};\n  let animal = Dogz(10);\n  let other = Dogz(2);\n  let me = Cat(\"Hie\");\n  let x = something + 10;\n};\n\n\nopen Something;\n\nlet y = x + 10;\n\nswitch me {\n| Dogz(n) => ()\n| _ => ()\n};\n\nlet z = x * x;\n\nlet aThing = 10 + Other.something;\n\n/** Some docs about this **awesome** thing. */\nlet awesome = 100 + m.age;\n\nlet thing = \"thing\";\n\nlet transform = (x, y) => x ++ string_of_float(y);\n\nlet z = transform(\"hello \", 5.);\n\n\n\nlet zzz = 1;\n\nlet more = 20;\n\n/** Something here */\nlet added = 10 + awesome;\n\nopen Other;\n\nopen Hashtbl;\n\n/** Some more documentation about this */\nlet awesome = x => x + 2;\n\nlet a = [\n  \"hello\",\n  \"my fine\" ++ \"folks\",\n  \"in boonville\"\n];\n\nlet div = (~x, ~y, ~children, ()) => 10;\n\nlet m = <div\n  x=10\n  y=20\n />;\n\n let something = animal => switch animal {\n   | blank => ()\n };\n\nlet someFunction = (memorableName, {contents}) => {\n  let innerMemorable = 20;\n  memorableName + innerMemorable;\n};\n\n/* let awesome = 10000; */\n\n/* let awesome = 111; */\n\nlet z = 10;\n\nlet z = find;\n\nlet z = later;\n\nlet m = Other.later;\n\nfor (index in 0 to 10) {\n  print_endline(\"hellO\");\n};\n\ntype awesome = {\n  one: string,\n  two: float,\n};\n\ntype lots =\n| Parties\n| Plutocrats(int, float)\n| Possums\n| Oppossums;\n\nlet y = Some(10 + awesome(3));\n\nlet z = {contents: 30};\nlet party = {one: \"one\", two: 2.};\n\nlet {one, two} = party;\n\nlet thing = () => {\n  34 + 43;\n};\n\ntype more = awesome;\n\nlet {contents} = z;\n\nswitch (y) {\n| Some(u) => ()\n| None => ()\n};\n\n/* let x = [%raw \" hello\"]; */\n\nlet awesome = \"hello\";\n"}]}}
{"jsonrpc":"2.0","id":103,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/jared/clone/tools/language-server/example-project/src/Hello.re"}}}
